// Generated by LiveScript 1.3.1
var data, versusRenderer, hot, detailtable, count, local, update, onchange, resize;
data = [["", "Judge John", "Judge Joe", "Judge Jacob", "Judge Judy"], ["Sakura", 90, 60, 80, 70], ["Sasuke", 80, 50, 70, 60], ["Naruto", 70, 40, 60, 50], ["Kakasi", 60, '', 50, 40], ["Itachi", 50, 20, '', 30]];
versusRenderer = function(instance, td, row, col, prop, value, cellProperties){
  td.classList.remove('win', 'lose', 'tie');
  if (value > local.judges.length / 2) {
    return td.classList.add('win');
  } else if (value < local.judges.length / 2) {
    return td.classList.add('lose');
  } else {
    return td.classList.add('tie');
  }
};
Handsontable.renderers.registerRenderer('versusRenderer', versusRenderer);
hot = new Handsontable(document.querySelector('#grid .inner'), {
  data: data,
  rowHeaders: true,
  colHeaders: true,
  filters: true,
  dropdownMenu: true,
  afterChange: onchange,
  rowHeights: 35,
  colWidths: 100
});
detailtable = new Handsontable(document.querySelector('#detail-grid .inner'), {
  rowHeaders: true,
  colHeaders: true,
  filters: true,
  dropdownMenu: true,
  rowHeights: 35,
  colWidths: 100,
  cell: function(r, c){
    return {
      renderer: 'versusRenderer'
    };
  }
});
count = {
  row: hot.countRows(),
  col: hot.countCols()
};
hot.alter("insert_col", count.col);
hot.updateSettings({
  cells: function(r, c){
    if (c === count.col) {
      return {
        readOnly: true
      };
    } else {
      return {};
    }
  }
});
local = {};
update = function(){
  var votes, judges, ref$, rank, detail, i$, to$, i, cand, lresult$, j$, to1$, j, results$ = [];
  votes = JSON.parse(JSON.stringify(data));
  votes.map(function(it){
    return it.splice(it.length - 1, 1);
  });
  local.judges = judges = votes[0].slice(1);
  ref$ = schulze.fromArray(votes, {}), rank = ref$.rank, detail = ref$.detail;
  hot.setDataAtCell(0, count.col, 'Rank');
  for (i$ = 0, to$ = rank.length; i$ < to$; ++i$) {
    i = i$;
    cand = rank[i];
    hot.setDataAtCell(cand.idx + 1, count.col, cand.rank);
  }
  for (i$ = 0, to$ = detail.length; i$ < to$; ++i$) {
    i = i$;
    lresult$ = [];
    for (j$ = 0, to1$ = detail[i].length; j$ < to1$; ++j$) {
      j = j$;
      lresult$.push(detailtable.setDataAtCell(i, j, detail[i][j]));
    }
    results$.push(lresult$);
  }
  return results$;
};
update();
onchange = function(){
  return update();
};
resize = function(){
  var ref$, col, row, i$, r;
  ref$ = Array.from(document.querySelectorAll('input')).map(function(it){
    return +it.value;
  }), col = ref$[0], row = ref$[1];
  if (!isNaN(row) && row > 1) {
    if (row < count.row) {
      for (i$ = count.row - 1; i$ >= row; --i$) {
        r = i$;
        hot.alter("remove_row", r);
      }
    }
    if (row > count.row) {
      for (i$ = count.row; i$ < row; ++i$) {
        r = i$;
        hot.alter("insert_row", r);
      }
    }
    count.row = row;
  }
  if (!isNaN(col) && col > 1) {
    if (col < count.col) {
      for (i$ = count.col - 1; i$ >= col; --i$) {
        r = i$;
        hot.alter("remove_col", r);
      }
    }
    if (col > count.col) {
      for (i$ = count.col; i$ < col; ++i$) {
        r = i$;
        hot.alter("insert_col", r);
      }
    }
    count.col = col;
  }
  return hot.updateSettings({
    cells: function(r, c){
      return r < count.row && c < count.col
        ? {
          readOnly: false
        }
        : {
          readOnly: true
        };
    }
  });
};
Array.from(document.querySelectorAll('input')).map(function(n){
  return n.addEventListener('keyup', function(){
    return resize();
  });
});